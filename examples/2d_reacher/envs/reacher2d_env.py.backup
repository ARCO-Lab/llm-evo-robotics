# import gymnasium as gym
# from gymnasium import Env
# from gymnasium.spaces import Box

import gym

from gym import Env

from gym.spaces import Box

from pymunk import Segment
import pymunk
import pymunk.pygame_util  # 明确导入pygame_util
import numpy as np
import pygame
import math
import yaml

import os
import sys
base_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "../../..")
sys.path.append(base_dir)
sys.path.insert(0, os.path.join(base_dir, 'examples/2d_reacher'))
sys.path.insert(0, os.path.join(base_dir, 'examples/2d_reacher/envs'))
sys.path.insert(0, os.path.join(base_dir, 'examples/2d_reacher/configs'))
print(sys.path)

class Reacher2DEnv(Env):

    
    def __init__(self, num_links=3, link_lengths=None, render_mode=None, config_path=None):

        super().__init__()
        self.config = self._load_config(config_path)
        print(f"self.config: {self.config}")
        self.anchor_point = self.config["start"]["position"]
        self.gym_api_version = "old" # old or new. new is gymnasium, old is gym

        self.num_links = num_links  # 修复：使用传入的参数
        if link_lengths is None:

            self.link_lengths = [60] * num_links

        else:
            assert len(link_lengths) == num_links
            self.link_lengths = link_lengths
        
        self.render_mode = render_mode
        # self.goal_pos = np.array([250.0, 250.0])
        self.dt = 1/60.0  # 增加时间步长精度
        self.max_torque = 100  # 增加最大扭矩

        # 定义Gymnasium必需的action_space和observation_space
        self.action_space = Box(low=-self.max_torque, high=self.max_torque, shape=(self.num_links,), dtype=np.float32)
        # self.observation_space = Box(low=-np.inf, high=np.inf, shape=(self.num_links * 2 + 2,), dtype=np.float32)
        self.observation_space = Box(low=-np.inf, high=np.inf, shape=(self.num_links * 2 + 7,), dtype=np.float32)
        self.space = pymunk.Space()
        self.space.gravity = (0.0, 981.0)
        # 减少全局阻尼
        self.space.damping = 0.999  # 🔧 增加阻尼让角度限制更有效
        self.obstacles = []
        self.bodies = []
        self.joints = []

        self._create_robot()  # 修复：方法名改为_create_robot
        self._create_obstacle()

        # 初始化渲染相关变量
        self.screen = None
        self.clock = None
        self.draw_options = None

        if self.render_mode:
            self._init_rendering()

    def _init_rendering(self):
        """初始化渲染相关组件"""
        pygame.init()
        self.screen = pygame.display.set_mode((1200, 1200))
        self.clock = pygame.time.Clock()
        self.draw_options = pymunk.pygame_util.DrawOptions(self.screen)

        

    def _create_robot(self):
        prev_body = None
        density = 0.8  # 🔧 增加密度，让约束更稳定
        self.joint_limits = []  # 🔧 存储角度限制约束
        
        # 🔧 定义关节角度限制范围（弧度）
        # 更严格的角度限制
        self.joint_angle_limits = [
            (-math.pi * 3/4, math.pi * 3/4),    # 第1个关节：±135° (比之前更严格)
            (-math.pi * 1/2, math.pi * 1/2),    # 第2个关节：±90°  (比之前更严格)
            (-math.pi * 1/2, math.pi * 1/2),    # 第3个关节：±90°  (比之前更严格)
            (-math.pi * 1/2, math.pi * 1/2),    # 第4个关节：±90°  (比之前更严格)
            (-math.pi * 1/2, math.pi * 1/2),    # 第5个关节：±90°  (比之前更严格)
        ]
        
        # 🔧 从锚点开始构建机器人，每个link都有明确的位置
        current_pos = list(self.anchor_point)  # [x, y]
        
        for i in range(self.num_links):
            length = self.link_lengths[i]
            mass = density * length * 10  # 🔧 增加质量
            moment = pymunk.moment_for_segment(mass, (0, 0), (length, 0), 8)  # 🔧 增加半径
            body = pymunk.Body(mass, moment)
            
            # 🔧 设置初始位置（让机器人自然垂直下垂）
            body.position = current_pos
            body.angle = math.pi/2  # 所有link初始都垂直向下
            
            # 🔧 创建形状 - 增加半径让碰撞更明显
            shape = pymunk.Segment(body, (0, 0), (length, 0), 8)  # 半径从5增加到8
            shape.friction = 0.8  # 🔧 增加摩擦力
            shape.collision_type = i + 1  # 🔧 为每个link设置不同的碰撞类型
            
            self.space.add(body, shape)
            self.bodies.append(body)
            
            # 创建关节连接
            if i == 0:
                # 🔧 基座关节：连接到世界
                joint = pymunk.PinJoint(self.space.static_body, body, self.anchor_point, (0, 0))
                joint.collide_bodies = False
                self.space.add(joint)
                self.joints.append(joint)
                
                # 🔧 添加强力角度限制约束
                if i < len(self.joint_angle_limits):
                    min_angle, max_angle = self.joint_angle_limits[i]
                    limit_joint = pymunk.RotaryLimitJoint(
                        self.space.static_body, body, 
                        min_angle, max_angle
                    )
                    # 🔧 增加约束的刚度
                    limit_joint.max_force = 50000  # 大幅增加最大约束力
                    self.space.add(limit_joint)
                    self.joint_limits.append(limit_joint)
                
            else:
                # 🔧 连接到前一个link的末端
                joint = pymunk.PinJoint(prev_body, body, (self.link_lengths[i-1], 0), (0, 0))
                joint.collide_bodies = False
                self.space.add(joint)
                self.joints.append(joint)
                
                # 🔧 添加相对角度限制约束
                if i < len(self.joint_angle_limits):
                    min_angle, max_angle = self.joint_angle_limits[i]
                    limit_joint = pymunk.RotaryLimitJoint(
                        prev_body, body, 
                        min_angle, max_angle
                    )
                    # 🔧 增加约束的刚度
                    limit_joint.max_force = 50000  # 大幅增加最大约束力
                    self.space.add(limit_joint)
                    self.joint_limits.append(limit_joint)
            
            # 🔧 计算下一个link的起始位置（用于初始化）
            if i < self.num_links - 1:
                end_x = current_pos[0] + length * math.cos(math.pi/2)  # 垂直向下
                end_y = current_pos[1] + length * math.sin(math.pi/2)
                current_pos = [end_x, end_y]
            
            prev_body = body
        
        # 🔧 添加关节间碰撞检测（可选 - 防止严重自碰撞）
        self._setup_collision_handlers()

    def _setup_collision_handlers(self):
        """设置关节间碰撞处理"""
        try:
            def collision_handler(arbiter, space, data):
                # 当相邻关节碰撞时，阻止穿透
                return True  # 允许碰撞处理
            
            # 🔧 只处理非相邻关节的碰撞（相邻关节允许接触）
            for i in range(self.num_links):
                for j in range(i + 2, self.num_links):  # 跳过相邻关节
                    try:
                        # 尝试不同的方法名
                        if hasattr(self.space, 'add_collision_handler'):
                            handler = self.space.add_collision_handler(i + 1, j + 1)
                        elif hasattr(self.space, 'add_wildcard_collision_handler'):
                            handler = self.space.add_wildcard_collision_handler(i + 1)
                        else:
                            # 如果方法不存在，跳过碰撞处理设置
                            print("⚠️ 碰撞处理器设置跳过 - pymunk版本不兼容")
                            return
                        handler.pre_solve = collision_handler
                    except Exception as e:
                        print(f"⚠️ 设置碰撞处理器失败: {e}")
                        continue
        except Exception as e:
            print(f"⚠️ 碰撞处理器设置跳过: {e}")
            # 不影响主要功能，继续运行

    def _apply_damping(self, body, gravity, damping, dt):
        """应用轻微的阻尼力"""
        # 🔧 增加阻尼，特别是角速度阻尼
        body.velocity = body.velocity * 0.995  # 增加线性阻尼
        body.angular_velocity = body.angular_velocity * 0.99  # 增加角速度阻尼
        # 应用重力
        pymunk.Body.update_velocity(body, gravity, damping, dt)

    def reset(self, seed=None, options=None):  # 修复：添加正确的reset方法
        super().reset(seed=seed)
        self.space.remove(*self.space.bodies, *self.space.shapes, *self.space.constraints)
        self.bodies.clear()
        self.joints.clear()
        self.obstacles.clear()
        
        # 🔧 清理角度限制约束
        if hasattr(self, 'joint_limits'):
            self.joint_limits.clear()

        self._create_robot()
        self._create_obstacle()
        observation = self._get_observation()
        info = {}
        if self.gym_api_version == "old":
            return observation
        else:
            return observation, info

    def _get_observation(self):
        """获取当前状态观察值"""
        obs = []
        for body in self.bodies:
            obs.extend([body.angle, body.angular_velocity])
        
        # 计算末端执行器位置
        end_effector_pos = self._get_end_effector_position()
        obs.extend(end_effector_pos)
        
        # 🔧 添加目标信息
        obs.extend(self.goal_pos)  # 目标位置
        
        # 🔧 添加相对位置信息  
        relative_pos = np.array(self.goal_pos) - np.array(end_effector_pos)
        obs.extend(relative_pos)  # 到目标的相对位置
        
        # 🔧 添加距离信息
        distance = np.linalg.norm(relative_pos)
        obs.append(distance)  # 到目标的距离
        
        return np.array(obs, dtype=np.float32)

    def _get_end_effector_position(self):
        """计算末端执行器的位置"""
        if not self.bodies:
            return [0.0, 0.0]
        
        # 从第一个link的位置开始
        pos = np.array(self.bodies[0].position)
        current_angle = 0.0
        
        for i, body in enumerate(self.bodies):
            # 累积角度
            current_angle += body.angle
            length = self.link_lengths[i]
            
            # 计算这个link末端的位置
            if i == 0:
                # 第一个link从其起始位置延伸
                pos = np.array(self.bodies[0].position) + np.array([
                    length * np.cos(current_angle), 
                    length * np.sin(current_angle)
                ])
            else:
                # 后续link从前一个link的末端延伸
                pos += np.array([
                    length * np.cos(current_angle), 
                    length * np.sin(current_angle)
                ])
        
        return pos.tolist()
    
    
    def step(self, actions):
        """使用直接力矩控制，移除SimpleMotor"""
        actions = np.clip(actions, -self.max_torque, self.max_torque)
        
        # 🔧 直接应用力矩到关节，不使用马达
        for i, torque in enumerate(actions):
            if i < len(self.bodies):
                body = self.bodies[i]
                # 直接设置扭矩
                body.torque = float(torque)

        # 🔧 步进物理仿真前，先检查和修正角度
        self._enforce_joint_limits_before_step()
        
        self.space.step(self.dt)
        
        # 🔧 步进后再次强制执行角度限制
        self._enforce_joint_limits_after_step()
        
        # 🧪 减少输出频率
        if not hasattr(self, 'step_counter'):
            self.step_counter = 0
        self.step_counter += 1
        
        if self.step_counter % 20 == 0:  # 每20步打印一次
            self._print_joint_status()
        
        observation = self._get_observation()
        reward = self._compute_reward()
        terminated = False
        truncated = False
        info = {}

        if self.gym_api_version == "old":
            done = terminated or truncated
            return observation, reward, done, info
        else:
            return observation, reward, terminated, truncated, info

    def _enforce_joint_limits_before_step(self):
        """在物理步进前强制执行角度限制"""
        for i, body in enumerate(self.bodies):
            if i < len(self.joint_angle_limits):
                min_angle, max_angle = self.joint_angle_limits[i]
                
                # 标准化角度到 [-π, π]
                angle = body.angle
                while angle > math.pi:
                    angle -= 2 * math.pi
                while angle < -math.pi:
                    angle += 2 * math.pi
                
                # 如果超出限制，强制设回范围内并停止旋转
                if angle < min_angle:
                    body.angle = min_angle
                    body.angular_velocity = 0
                    body.torque = 0  # 🔧 也清零扭矩
                elif angle > max_angle:
                    body.angle = max_angle
                    body.angular_velocity = 0
                    body.torque = 0  # 🔧 也清零扭矩

    def _enforce_joint_limits_after_step(self):
        """在物理步进后强制执行角度限制"""
        for i, body in enumerate(self.bodies):
            if i < len(self.joint_angle_limits):
                min_angle, max_angle = self.joint_angle_limits[i]
                
                # 标准化角度到 [-π, π]
                angle = body.angle
                while angle > math.pi:
                    angle -= 2 * math.pi
                while angle < -math.pi:
                    angle += 2 * math.pi
                
                # 双重检查：如果仍然超出限制
                if angle < min_angle or angle > max_angle:
                    # 限制角度
                    body.angle = max(min_angle, min(max_angle, angle))
                    # 停止旋转
                    body.angular_velocity = 0

    def _print_joint_status(self):
        """打印关节状态信息"""
        angles = [math.degrees(body.angle) for body in self.bodies]
        print(f"步骤 {self.step_counter:4d} - 关节角度: {[f'{a:7.1f}°' for a in angles]}")
        
        # 检查约束是否还存在
        constraints_count = len([c for c in self.space.constraints if hasattr(c, 'min')])
        print(f"    约束数量: {constraints_count}/{len(self.joint_limits)} (期望{len(self.joint_limits)})")
        
        # 检查是否有角度超出限制 - 使用更严格的限制
        limit_degrees = [(-135, 135), (-90, 90), (-90, 90), (-90, 90), (-90, 90)]
        violations = []
        for i, (angle, (min_limit, max_limit)) in enumerate(zip(angles, limit_degrees)):
            if angle < min_limit or angle > max_limit:
                violations.append(f"关节{i+1}超限: {angle:.1f}°")
        
        if violations:
            print(f"    ⚠️  角度超限: {', '.join(violations)}")
        else:
            print(f"    ✅ 所有关节角度在限制范围内")

    def _compute_reward(self):
        end_effector_pos = np.array(self._get_end_effector_position())
        distance_to_goal = np.linalg.norm(end_effector_pos - self.goal_pos)
        
        # 🔧 更强的距离奖励信号
        distance_reward = -distance_to_goal / 50.0  # 从100.0改为50.0，增强距离惩罚
        
        # 🔧 添加进步奖励
        if not hasattr(self, 'prev_distance'):
            self.prev_distance = distance_to_goal
        
        progress = self.prev_distance - distance_to_goal  # 正值表示靠近
        progress_reward = progress * 20.0  # 从10.0增加到20.0，更强的进步奖励
        
        # 🔧 添加到达目标的巨大奖励
        if distance_to_goal <= 50.0:  # 在50像素阈值内
            success_bonus = 100.0  # 大的成功奖励
        else:
            success_bonus = 0.0
            
        self.prev_distance = distance_to_goal
        
        return distance_reward + progress_reward + success_bonus
    
    def _load_config(self, config_path):
        if config_path is None:
            return {}
        
        # 如果是相对路径，将其转换为相对于当前脚本文件的路径
        if not os.path.isabs(config_path):
            # 获取当前脚本文件所在目录
            script_dir = os.path.dirname(os.path.abspath(__file__))
            # 将相对路径转换为基于脚本目录的绝对路径
            config_path = os.path.normpath(os.path.join(script_dir, "..", config_path))
        
        print(f"尝试加载配置文件: {config_path}")  # 调试用
        
        try:
            with open(config_path, 'r') as f:
                return yaml.safe_load(f)
        except FileNotFoundError:
            print(f"错误：配置文件 {config_path} 不存在")
            return {}
        except Exception as e:
            print(f"错误：加载配置文件失败: {e}")
            return {}

    def _create_obstacle(self):
        if "obstacles" not in self.config:
            return
        
        for obs in self.config["obstacles"]:
            if obs["shape"] == "segment":
                p1 = tuple(obs["points"][0])
                p2 = tuple(obs["points"][1])
                shape = pymunk.Segment(self.space.static_body, p1, p2, 3.0)
                shape.friction = 1.0
                shape.color = (0,0,0,255)
                self.space.add(shape)
                self.obstacles.append(shape)

        if "goal" in self.config:
            self.goal_pos = np.array(self.config["goal"]["position"])
            self.goal_radius = self.config["goal"]["radius"]

   

    def render(self):
        if not self.render_mode:
            return
            
        self.screen.fill((255, 255, 255))
        
        # 绘制目标点
        pygame.draw.circle(self.screen, (255, 0, 0), self.goal_pos.astype(int), 10)
        
        self.space.debug_draw(self.draw_options)
        pygame.display.flip()
        self.clock.tick(60)  # 控制渲染帧率

    def close(self):
        if hasattr(self, 'screen'):
            pygame.quit()

    def get_joint_angles(self):
        """获取所有关节的当前角度（度数）"""
        return [math.degrees(body.angle) for body in self.bodies]

    
if __name__ == "__main__":
    env = Reacher2DEnv(num_links=5, 
                       link_lengths=[80, 50, 30, 20, 50], 
                       render_mode="human",
                       config_path = "configs/reacher_with_zigzag_obstacles.yaml"
                       )

    running = True
    obs= env.reset()  # 修复：使用正确的reset调用
    step_count = 0
    
    while running and step_count < 30000:  # 增加到300步测试更严格的限制
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        # 🧪 使用极大的力矩测试新的角度限制系统
        actions = np.random.uniform(-500, 500, size=env.num_links)  # 使用更大的力矩测试
        obs, reward, terminated, truncated= env.step(actions)
        env.render()
        step_count += 1

    env.close()
    
    # 📊 最终总结
    print("\n" + "="*60)
    print("🎯 增强角度限制测试总结:")
    print(f"✅ 测试步数: {step_count}")
    print(f"✅ 约束数量: {len(env.joint_limits)}")
    print(f"✅ 最终关节角度: {env.get_joint_angles()}")
    print(f"✅ 改进的角度限制系统:")
    print(f"   - 移除了SimpleMotor (避免冲突)")
    print(f"   - 增强了RotaryLimitJoint约束力")
    print(f"   - 添加了双重角度强制检查")
    print(f"   - 增加了关节间碰撞检测")
    print(f"   - 使用更严格的角度限制")
    print("="*60)